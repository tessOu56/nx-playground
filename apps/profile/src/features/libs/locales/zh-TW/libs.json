{
  "page": {
    "title": "共享函式庫",
    "subtitle": "支撐整個 monorepo 生態系統的可重用函式庫",
    "intro": "這些共享函式庫展示了現代 React 開發實踐，在保持型別安全和一致性的同時，實現多個應用程式之間的程式碼重用。"
  },
  "categories": {
    "ui": "UI 與設計",
    "data": "資料與狀態",
    "utils": "工具與輔助"
  },
  "libs": {
    "ui-components": {
      "name": "UI 組件庫",
      "description": "使用 React、TypeScript 和 Radix UI 原語構建的完整 UI 組件庫",
      "purpose": "為所有應用程式提供一致、無障礙且可重用的 UI 組件",
      "highlights": [
        "40+ 個生產就緒組件",
        "完整 TypeScript 支援",
        "無障礙優先設計（WCAG 2.1）",
        "Tailwind CSS 整合",
        "Radix UI 原語"
      ]
    },
    "design-system": {
      "name": "設計系統",
      "description": "設計標記和主題系統，整合 Style Dictionary",
      "purpose": "透過基於標記的主題確保應用程式間的一致設計語言",
      "highlights": [
        "設計標記管理",
        "多主題支援",
        "CSS 變數生成",
        "Tailwind 配置",
        "型別安全的標記"
      ]
    },
    "i18n": {
      "name": "國際化",
      "description": "基於 i18next 的國際化解決方案，支援功能級翻譯",
      "purpose": "透過命名空間隔離和 SSR 相容性實現多語言支援",
      "highlights": [
        "基於功能的命名空間",
        "語言檢測",
        "SSR 支援（Next.js）",
        "型別安全的翻譯",
        "語言切換器組件"
      ]
    },
    "hooks": {
      "name": "自定義 Hooks",
      "description": "常見模式的可重用 React hooks 集合",
      "purpose": "使用經過測試的 hooks 簡化狀態管理和副作用",
      "highlights": [
        "useDebounce 和 useThrottle",
        "useLocalStorage 和 useSessionStorage",
        "useAsync 用於資料獲取",
        "useModal 和 useToast",
        "usePagination"
      ]
    },
    "api-client": {
      "name": "API 客戶端",
      "description": "使用 Orval 從 OpenAPI 規範生成的型別安全 API 客戶端",
      "purpose": "提供完全型別化的 API 呼叫，支援自動程式碼生成",
      "highlights": [
        "OpenAPI/Swagger 整合",
        "自動型別生成",
        "React Query hooks",
        "錯誤處理",
        "Mock 資料支援"
      ]
    },
    "charts": {
      "name": "圖表組件",
      "description": "支援 Chart.js 和 Recharts 的圖表組件庫",
      "purpose": "使用響應式和可自訂的圖表組件視覺化資料",
      "highlights": [
        "多種圖表類型",
        "響應式設計",
        "主題整合",
        "TypeScript 支援",
        "雙函式庫支援"
      ]
    },
    "auth-client": {
      "name": "認證客戶端",
      "description": "認證工具和 context providers",
      "purpose": "簡化應用程式間的認證實作",
      "highlights": [
        "Auth context provider",
        "受保護的路由",
        "會話管理",
        "重定向工具",
        "Token 處理"
      ]
    }
  },
  "benefits": {
    "title": "共享函式庫的優勢",
    "items": [
      {
        "title": "程式碼可重用性",
        "description": "編寫一次，到處使用。減少重複和維護開銷"
      },
      {
        "title": "型別安全",
        "description": "完整的 TypeScript 支援確保編譯時錯誤檢測"
      },
      {
        "title": "一致性",
        "description": "在所有應用程式中保持一致的使用者體驗和行為"
      },
      {
        "title": "獨立更新",
        "description": "透過適當的版本控制獨立更新函式庫"
      },
      {
        "title": "Tree Shaking",
        "description": "只匯入所需內容，減少打包大小"
      },
      {
        "title": "可測試性",
        "description": "在函式庫層級測試一次，所有應用程式都受益"
      }
    ]
  }
}

